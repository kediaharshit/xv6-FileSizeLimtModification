diff -Naur xv6-orig/create_file.c xv6_q3/create_file.c
--- xv6-orig/create_file.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6_q3/create_file.c	2019-11-08 21:32:30.775985974 +0530
@@ -0,0 +1,18 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+
+	int fd = open("myfile.txt",O_CREATE | O_RDWR );
+	int i;
+	for(i=0;i<100;++i){
+		write(fd,"Harshit",7);
+	}
+	write(fd, "\n", 1);
+	exit();
+
+}
\ No newline at end of file
diff -Naur xv6-orig/fs.c xv6_q3/fs.c
--- xv6-orig/fs.c	2019-10-11 13:19:05.000000000 +0530
+++ xv6_q3/fs.c	2019-11-08 21:39:59.755984262 +0530
@@ -77,6 +77,7 @@
   panic("balloc: out of blocks");
 }
 
+
 // Free a disk block.
 static void
 bfree(int dev, uint b)
@@ -399,6 +400,59 @@
   panic("bmap: out of range");
 }
 
+
+static uint
+bmap_EXT(struct inode *ip, uint bn)
+{
+  uint addr, *a;
+  struct buf *bp;
+
+ int i,count=0;
+
+ for(i=0;i<NDIRECT;i+=2){
+
+      if(ip->addrs[i]==0){
+       addr = balloc(ip->dev);
+       if(i>0  && ip->addrs[i-1]==addr-1){  
+          ip->addrs[i-1]=addr;
+        }
+        else{
+          ip->addrs[i]=addr;
+          ip->addrs[i+1]=addr;
+        }
+       
+       return addr;
+    }
+
+   count+=(ip->addrs[i+1]-ip->addrs[i]+1);
+   if(count>bn){
+     addr=bn-(count-(ip->addrs[i+1]-ip->addrs[i]+1));
+     addr=ip->addrs[i]+addr;
+     return addr;
+   }
+
+ 
+ }
+
+  
+  bn -= count;
+
+  if(bn < NINDIRECT){
+    // Load indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT]) == 0)
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+    bp = bread(ip->dev, addr);
+    a = (uint*)bp->data;
+    if((addr = a[bn]) == 0){
+      a[bn] = addr = balloc(ip->dev);
+      log_write(bp);
+    }
+    brelse(bp);
+    return addr;
+  }
+
+  panic("bmap: out of range");
+}
 // Truncate inode (discard contents).
 // Only called when the inode has no links
 // to it (no directory entries referring to it)
@@ -449,12 +503,31 @@
 //PAGEBREAK!
 // Read data from inode.
 // Caller must hold ip->lock.
+
 int
 readi(struct inode *ip, char *dst, uint off, uint n)
 {
   uint tot, m;
   struct buf *bp;
 
+  if(ip->type== T_EXT_FILE){
+
+      if(off > ip->size || off + n < off)
+        return -1;
+      if(off + n > ip->size)
+        n = ip->size - off;
+
+      for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+
+        bp = bread(ip->dev, bmap_EXT(ip, off/BSIZE));
+        m = min(n - tot, BSIZE - off%BSIZE);
+        memmove(dst, bp->data + off%BSIZE, m);
+        brelse(bp);
+      }
+      return n;
+  }
+
+
   if(ip->type == T_DEV){
     if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
       return -1;
@@ -478,12 +551,57 @@
 // PAGEBREAK!
 // Write data to inode.
 // Caller must hold ip->lock.
+// int mywritei(struct inode *ip, char *src, uint off, uint n){
+//   uint tot, m;
+//   struct buf *bp;
+
+//   if(off > ip->size || off + n < off)
+//     return -1;
+//   if(off + n > MAXFILE*BSIZE)
+//     return -1;
+
+//   for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+//     bp = bread(ip->dev, bmap_EXT(ip, off/BSIZE));
+//     m = min(n - tot, BSIZE - off%BSIZE);
+//     memmove(bp->data + off%BSIZE, src, m);
+//     log_write(bp);
+//     brelse(bp);
+//   }
+
+//   if(n > 0 && off > ip->size){
+//     ip->size = off;
+//     iupdate(ip);
+//   }
+//   return n;
+// }
+
 int
 writei(struct inode *ip, char *src, uint off, uint n)
 {
   uint tot, m;
   struct buf *bp;
 
+  if(ip->type == T_EXT_FILE){
+      if(off > ip->size || off + n < off)
+        return -1;
+      if(off + n > MAXFILE*BSIZE)
+        return -1;
+
+      for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+        bp = bread(ip->dev, bmap_EXT(ip, off/BSIZE));
+        m = min(n - tot, BSIZE - off%BSIZE);
+        memmove(bp->data + off%BSIZE, src, m);
+        log_write(bp);
+        brelse(bp);
+      }
+
+      if(n > 0 && off > ip->size){
+        ip->size = off;
+        iupdate(ip);
+      }
+      return n;
+  }
+
   if(ip->type == T_DEV){
     if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
       return -1;
diff -Naur xv6-orig/Makefile xv6_q3/Makefile
--- xv6-orig/Makefile	2019-10-11 13:19:05.000000000 +0530
+++ xv6_q3/Makefile	2019-11-07 23:12:50.475979000 +0530
@@ -181,6 +181,7 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_create_file\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -250,7 +251,7 @@
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c create_file.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff -Naur xv6-orig/stat.h xv6_q3/stat.h
--- xv6-orig/stat.h	2019-10-11 13:19:05.000000000 +0530
+++ xv6_q3/stat.h	2019-11-08 21:36:27.967985069 +0530
@@ -1,6 +1,7 @@
 #define T_DIR  1   // Directory
 #define T_FILE 2   // File
 #define T_DEV  3   // Device
+#define T_EXT_FILE 4
 
 struct stat {
   short type;  // Type of file
diff -Naur xv6-orig/sysfile.c xv6_q3/sysfile.c
--- xv6-orig/sysfile.c	2019-10-11 13:19:05.000000000 +0530
+++ xv6_q3/sysfile.c	2019-11-08 21:37:30.403984831 +0530
@@ -251,8 +251,7 @@
   if((ip = dirlookup(dp, name, 0)) != 0){
     iunlockput(dp);
     ilock(ip);
-    if(type == T_FILE && ip->type == T_FILE)
-      return ip;
+  if((type == T_FILE && ip->type == T_FILE) || (type == T_EXT_FILE && ip->type == T_EXT_FILE))      return ip;
     iunlockput(ip);
     return 0;
   }
@@ -296,7 +295,7 @@
   begin_op();
 
   if(omode & O_CREATE){
-    ip = create(path, T_FILE, 0, 0);
+    ip = create(path, T_EXT_FILE, 0, 0);
     if(ip == 0){
       end_op();
       return -1;
