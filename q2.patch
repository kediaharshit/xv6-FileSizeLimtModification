Only in xv6_q2: create_file.c
diff xv6-orig/fs.c xv6_q2/fs.c
78a79,105
> static uint
> balloc_dup(uint dev)
> {
>   int b, bi, m,m1;
>   struct buf *bp;
>   // cprintf("Helo");
>   bp = 0;
>   for(b = 0; b < sb.size; b += BPB){
>     bp = bread(dev, BBLOCK(b, sb));
>     
>     for(bi = 0; bi +1 < BPB && b + bi +1< sb.size; bi++){
>       m = 1 << (bi % 8);
>       m1 = 1 << ((bi+1) % 8);
>       if(((bp->data[bi/8] & m) == 0) &&  ((bp->data[(bi+1)/8] & m1) == 0)  ){  // Is block free?
>         bp->data[bi/8] |= m;  // Mark block in use.
>         bp->data[(bi+1)/8] |= m1;  // Mark block in use.
>         log_write(bp);
>         brelse(bp);
>         bzero(dev, b + bi);
>         bzero(dev, b + bi+1);
>         return b + bi;
>       }
>     }
>     brelse(bp);
>   }
>   panic("balloc: out of blocks");
> }
401a429,459
> static uint
> bmap_dup(struct inode *ip, uint bn)
> {
>   uint addr, *a;
>   struct buf *bp;
> 
>   // cprintf("Helo");
> 
>   if(bn < NDIRECT){
>     if((addr = ip->addrs[bn]) == 0)
>       ip->addrs[bn] = addr = balloc_dup(ip->dev);
>     return addr;
>   }
>   bn -= NDIRECT;
> 
>   if(bn < NINDIRECT){
>     // Load indirect block, allocating if necessary.
>     if((addr = ip->addrs[NDIRECT]) == 0)
>       ip->addrs[NDIRECT] = addr = balloc(ip->dev);
>     bp = bread(ip->dev, addr);
>     a = (uint*)bp->data;
>     if((addr = a[bn]) == 0){
>       a[bn] = addr = balloc(ip->dev);
>       log_write(bp);
>     }
>     brelse(bp);
>     return addr;
>   }
> 
>   panic("bmap: out of range");
> }
448a507,550
> 
> 
> // int 
> // readi_DUP(struct inode *ip, char *dst, uint off, uint n){
> //   uint tot, m;
> //   struct buf *bp;
> 
> //   if(off > ip->size || off + n < off)
> //     return -1;
> //   if(off + n > ip->size)
> //     n = ip->size - off;
> 
> //   int b_sz,b_off,b_no;
> //   for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
> //     b_n0=off/(2*BSIZE);
> 
>     
> //     if(b_no<12){
> //       b_sz=2*BSIZE;
> //       b_off=off%(2*BSIZE);
> 
> //       if(bt & BSIZE){
> //         bp = bread(ip->dev, bmap_dup(ip, b_no)+1);
> //         b_off=b_off%BSIZE;
> //       }
> //       else{
> //         bp = bread(ip->dev, bmap_dup(ip, b_no));
> //       }
> 
> //     }
> //     else{
> //       b_no=(off-12*BSIZE*2)/BSIZE+12;
> //       b_off=off%BSIZE;
> //       b_sz=BSIZE;
> //       bp = bread(ip->dev, bmap_dup(ip, b_no));
> //     }
> 
> //     m = min(n - tot, b_zs - b_off);
> //     memmove(dst, bp->data + b_off, m);
> //     brelse(bp);
> //   }
> //   return n;
> // }
> 
457a560,598
> 
>   if(ip->type== T_DUP_BLK_FILE){
>       if(off > ip->size || off + n < off)
>         return -1;
>       if(off + n > ip->size)
>         n = ip->size - off;
> 
>       int b_sz,b_off,b_no;
>       for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
>         b_no=off/(2*BSIZE);
> 
>         
>         if(b_no<12){
>           b_sz=2*BSIZE;
>           b_off=off%(2*BSIZE);
> 
>           if(b_off & BSIZE){
>             bp = bread(ip->dev, bmap_dup(ip, b_no)+1);
>             b_off=b_off%BSIZE;
>           }
>           else{
>             bp = bread(ip->dev, bmap_dup(ip, b_no));
>           }
> 
>         }
>         else{
>           b_no=(off-12*BSIZE*2)/BSIZE+12;
>           b_off=off%BSIZE;
>           b_sz=BSIZE;
>           bp = bread(ip->dev, bmap_dup(ip, b_no));
>         }
> 
>         m = min(n - tot, b_sz - b_off);
>         memmove(dst, bp->data + b_off, m);
>         brelse(bp);
>       }
>       return n;
>   }
> 
480a622,670
> // int writei_DUP(struct inode *ip, char *src, uint off, uint n){
> //   uint tot, m;
> //   struct buf *bp;
> 
> //   if(off > ip->size || off + n < off)
> //     return -1;
> //   if(off + n > MAXFILEDUP*BSIZE)
> //     return -1;
> 
> //   int b_no, b_off, b_sz;
> 
> //   for(tot=0; tot<n; tot+=m, off+=m, src+=m){
> //     b_no=off/(2*BSIZE);
> 
> //     if(b_no<NDIRECT){
> //       b_sz=2*BSIZE;
> //       b_off=off%(b_sz);
> 
> //       if(b_off & BSIZE){
> //         bp = bread(ip->dev, bmap_dup(ip, b_no)+1);
> //         b_off=b_off%BSIZE;
> //       }
> //       else{
> //         bp = bread(ip->dev, bmap_dup(ip, b_no));
> //       }
> 
> //     }
> //     else{
> //       b_no=(off-NDIRECT*BSIZE*2)/BSIZE+12;
> //       b_off=off%BSIZE;
> //       b_sz=BSIZE;
> //       bp = bread(ip->dev, bmap_dup(ip, b_no));
> //     }
> 
>     
> //     m = min(n - tot, b_sz - b_no);
> //     memmove(bp->data + b_off, src, m);
> //     log_write(bp);
> //     brelse(bp);
> //   }
> 
> //   if(n > 0 && off > ip->size){
> //     ip->size = off;
> //     iupdate(ip);
> //   }
> //   return n;
> // }
> 
> 
485a676,723
> 
>   if(ip->type == T_DUP_BLK_FILE){
>       if(off > ip->size || off + n < off)
>         return -1;
>       if(off + n > MAXFILEDUP*BSIZE)
>         return -1;
> 
>       int b_no, b_off, b_sz;
> 
>       for(tot=0; tot<n; tot+=m, off+=m, src+=m){
>         b_no=off/(2*BSIZE);
> 
>         if(b_no<NDIRECT){
>           b_sz=2*BSIZE;
>           b_off=off%(b_sz);
> 
>           if(b_off & BSIZE){
>             bp = bread(ip->dev, bmap_dup(ip, b_no)+1);
>             b_off=b_off%BSIZE;
>           }
>           else{
>             bp = bread(ip->dev, bmap_dup(ip, b_no));
>           }
> 
>         }
>         else{
>           b_no=(off-NDIRECT*BSIZE*2)/BSIZE+12;
>           b_off=off%BSIZE;
>           b_sz=BSIZE;
>           bp = bread(ip->dev, bmap_dup(ip, b_no));
>         }
> 
>         
>         m = min(n - tot, b_sz - b_no);
>         memmove(bp->data + b_off, src, m);
>         log_write(bp);
>         brelse(bp);
>       }
> 
>       if(n > 0 && off > ip->size){
>         ip->size = off;
>         iupdate(ip);
>       }
>       return n;
> 
> 
>   }
> 
diff xv6-orig/fs.h xv6_q2/fs.h
26a27
> #define MAXFILEDUP (2*NDIRECT + NINDIRECT)
diff xv6-orig/Makefile xv6_q2/Makefile
183a184
> 	_create_file\
253c254
< 	printf.c umalloc.c\
---
> 	printf.c umalloc.c create_file.c\
Only in xv6_q2: .rej
diff xv6-orig/stat.h xv6_q2/stat.h
3a4
> #define T_DUP_BLK_FILE 4 //new system
diff xv6-orig/sysfile.c xv6_q2/sysfile.c
254c254
<     if(type == T_FILE && ip->type == T_FILE)
---
>     if((type == T_FILE && ip->type == T_FILE) || (type == T_DUP_BLK_FILE && ip->type == T_DUP_BLK_FILE))
299,300c299
<     ip = create(path, T_FILE, 0, 0);
<     if(ip == 0){
---
>     ip = create(path, T_DUP_BLK_FILE , 0, 0);    if(ip == 0){
